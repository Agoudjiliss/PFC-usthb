
#!/usr/bin/env python3
"""
Serveur LLM simul√© pour traitement de PDF et g√©n√©ration de datasets Rasa
Compatible avec l'architecture s√©par√©e USTHB-Bot
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import json
import random
import time
import os
from werkzeug.utils import secure_filename

app = Flask(__name__)
CORS(app)

# Configuration
UPLOAD_FOLDER = 'uploads/llm'
ALLOWED_EXTENSIONS = {'pdf', 'txt', 'doc', 'docx'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max

# Cr√©er le dossier d'upload
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def generate_rasa_dataset(extracted_text, context="USTHB Bot"):
    """G√©n√®re un dataset Rasa simul√© bas√© sur le texte extrait"""
    
    # Exemples de donn√©es simul√©es bas√©es sur l'innovation et l'entrepreneuriat
    base_intents = [
        {
            "intent": "startup_creation",
            "examples": [
                "Comment cr√©er une startup ?",
                "Les √©tapes pour lancer une entreprise",
                "Cr√©er sa propre entreprise",
                "D√©marrer une startup innovante"
            ]
        },
        {
            "intent": "funding_advice", 
            "examples": [
                "Comment financer mon projet ?",
                "O√π trouver des investisseurs ?",
                "Sources de financement startup",
                "Obtenir des fonds pour entreprendre"
            ]
        },
        {
            "intent": "business_plan",
            "examples": [
                "Comment r√©diger un business plan ?",
                "Mod√®le de plan d'affaires",
                "Structure d'un business plan",
                "Cr√©er un plan de d√©veloppement"
            ]
        },
        {
            "intent": "innovation_process",
            "examples": [
                "Processus d'innovation",
                "Comment innover ?",
                "D√©velopper une id√©e innovante",
                "M√©thodologie d'innovation"
            ]
        },
        {
            "intent": "legal_requirements",
            "examples": [
                "D√©marches l√©gales pour cr√©er une entreprise",
                "Statut juridique startup",
                "R√©glementation entrepreneuriat",
                "Formalit√©s administratives"
            ]
        }
    ]
    
    # Enrichir avec du contenu bas√© sur le texte (simulation)
    enhanced_dataset = []
    for intent_data in base_intents:
        enhanced_intent = {
            "intent": intent_data["intent"],
            "examples": intent_data["examples"]
        }
        
        # Ajouter des exemples g√©n√©r√©s (simulation bas√©e sur le texte)
        if "startup" in extracted_text.lower() or "entreprise" in extracted_text.lower():
            enhanced_intent["examples"].extend([
                f"Qu'est-ce que dit le document sur {intent_data['intent'].replace('_', ' ')} ?",
                f"Information sur {intent_data['intent'].replace('_', ' ')} dans le PDF"
            ])
        
        enhanced_dataset.append(enhanced_intent)
    
    return enhanced_dataset

@app.route('/health', methods=['GET'])
def health_check():
    """Point de sant√© du service LLM"""
    return jsonify({
        "status": "UP",
        "service": "LLM Server",
        "version": "1.0.0",
        "timestamp": time.time()
    })

@app.route('/process-pdf', methods=['POST'])
def process_pdf():
    """Traite un fichier PDF et g√©n√®re un dataset Rasa"""
    
    try:
        # V√©rifier la pr√©sence du fichier
        if 'file' not in request.files:
            return jsonify({"error": "Aucun fichier fourni"}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "Nom de fichier vide"}), 400
        
        if file and allowed_file(file.filename):
            # Sauvegarder le fichier
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)
            
            # Simuler l'extraction de texte (en r√©alit√©, utiliserait PyPDF2, pdfplumber, etc.)
            extracted_text = f"""
            Document trait√©: {filename}
            
            Contenu simul√© sur l'innovation et l'entrepreneuriat:
            
            L'innovation est un processus cr√©atif qui transforme les id√©es en solutions concr√®tes.
            Pour cr√©er une startup, il faut identifier un probl√®me, d√©velopper une solution,
            valider le march√© et construire un business model viable.
            
            Les √©tapes cl√©s incluent:
            1. Validation de l'id√©e
            2. √âtude de march√©
            3. D√©veloppement du produit minimum viable (MVP)
            4. Recherche de financement
            5. Lancement et croissance
            
            Les sources de financement incluent les fonds propres, les business angels,
            les incubateurs, et les organismes publics de soutien √† l'innovation.
            """
            
            # G√©n√©rer le dataset Rasa
            dataset = generate_rasa_dataset(extracted_text, "USTHB Innovation Hub")
            
            # Simuler un d√©lai de traitement
            time.sleep(2)
            
            response = {
                "success": True,
                "extracted_text": extracted_text,
                "extracted_text_length": len(extracted_text),
                "dataset": dataset,
                "generated_examples": sum(len(intent["examples"]) for intent in dataset),
                "processing_time": 2.0,
                "file_info": {
                    "filename": filename,
                    "size": os.path.getsize(filepath)
                }
            }
            
            return jsonify(response)
        
        else:
            return jsonify({"error": "Type de fichier non autoris√©"}), 400
    
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/generate-rasa-dataset', methods=['POST'])
def generate_dataset():
    """G√©n√®re un dataset Rasa √† partir de texte brut"""
    
    try:
        data = request.get_json()
        
        if not data or 'text' not in data:
            return jsonify({"error": "Texte requis"}), 400
        
        text = data['text']
        context = data.get('context', 'General')
        
        # G√©n√©rer le dataset
        dataset = generate_rasa_dataset(text, context)
        
        response = {
            "success": True,
            "dataset": dataset,
            "context": context,
            "generated_intents": len(dataset),
            "total_examples": sum(len(intent["examples"]) for intent in dataset)
        }
        
        return jsonify(response)
    
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/status', methods=['GET'])
def status():
    """Statut d√©taill√© du service"""
    return jsonify({
        "service": "USTHB-Bot LLM Service",
        "status": "operational",
        "capabilities": [
            "PDF text extraction",
            "Rasa dataset generation",
            "Natural language processing"
        ],
        "supported_formats": list(ALLOWED_EXTENSIONS),
        "max_file_size": "16MB",
        "uptime": time.time()
    })

if __name__ == '__main__':
    print("üöÄ D√©marrage du serveur LLM USTHB-Bot...")
    print(f"üìÅ Dossier uploads: {UPLOAD_FOLDER}")
    print(f"üìã Extensions autoris√©es: {ALLOWED_EXTENSIONS}")
    
    # D√©marrer le serveur
    app.run(
        host='0.0.0.0',
        port=int(os.environ.get('PORT', 5001)),
        debug=True
    )
